@startuml level_3_FE

title Level 3 FE Diagram for US 7.2.6

hide empty members

skinparam class {
    BackgroundColor<<valueObject>> #D6EAF8
    BackgroundColor<<root>> #FDEBD0
    BackgroundColor<<service>> #D1F2EB
    BackgroundColor #FEF9E7
    ArrowColor Black
}

skinparam package {
    BackgroundColor #EBF5FB
}

actor Doctor as D
participant "View" as V 
participant "MedicalHistoryManagerComponent" as MHMC
participant "UpdateMedicalHistoryComponent" as UMHC
participant "MedicalConditionService" as MCS
participant "AllergyService" as AS
participant "MedicalHistoryService" as MHS
participant "AuthInterceptor" as AI
participant "MDV" as BE

activate D
D -> V: Requests to update Patient Medical Record
activate V
V -> MHMC: routerLink='/medical-history-manager'
activate MHMC
MHMC -> UMHC: routerLink='/update-medical-history/:medicalRecordNumber'
deactivate MHMC
activate UMHC

UMHC -> AS: getAllergies()
activate AS
AS -> AI: Sends HTTP Request to fetch allergies
activate AI
AI -> AI: Intercepts the request and adds the token to the header
note right of AI
    The token is added to the header so that the MDR
    can authenticate and authorize the request.
end note
AI -> BE: Sends HTTP Request with token to fetch allergies
activate BE
BE -> BE: Fetches allergies
BE --> AI: Returns list of allergies
deactivate BE
AI --> AS: Returns list of allergies
deactivate AI
AS --> UMHC: Returns list of allergies
deactivate AS

UMHC -> MCS: getMedicalConditions()
activate MCS
MCS -> AI: Sends HTTP Request to fetch medical conditions
activate AI
AI -> AI: Intercepts the request and adds the token to the header
note right of AI
    The token is added to the header so that the MDR
    can authenticate and authorize the request.
end note
AI -> BE: Sends HTTP Request with token to fetch medical conditions
activate BE
BE -> BE: Fetches medical conditions
BE --> AI: Returns list of medical conditions
deactivate BE
AI --> MCS: Returns list of medical conditions
deactivate AI
MCS --> UMHC: Returns list of medical conditions
deactivate MCS

UMHC -> MHS: getPatientMedicalHistory(medicalRecordNumber)
activate MHS
MHS -> AI: Sends HTTP Request to get Patient Medical Record
activate AI
AI -> AI: Intercepts the request and adds the token to the header
note right of AI
    The token is added to the header so that the MDR
    can authenticate and authorize the request.
end note
AI -> BE: Sends HTTP Request with token to update Patient Medical Record
activate BE
BE -> BE : Fetches Patient Medical Record
BE --> AI: Returns Patient Medical Record
deactivate BE
AI --> MHS: Returns Patient Medical Record
deactivate AI
MHS --> UMHC: Returns Patient Medical Record
deactivate MHS

UMHC --> V: Returns UpdatedMedicalHistoryComponent
deactivate UMHC
V --> D: Displays fetched data and allows to update
deactivate V
D -> V: Sends Patient Medical History \n update data (medicalConditions, allergies, familyHistory, freeText)
activate V
V-> UMHC: submitMedicalHistory()
activate UMHC
UMHC -> MHS: updatePatientMedicalHistory(medicalHistory)
activate MHS
MHS -> AI: Sends HTTP Request to update Patient Medical Record
activate AI
AI -> AI: Intercepts the request and adds the token to the header
note right of AI
    The token is added to the header so that the MDR
    can authenticate and authorize the request.
end note
AI -> BE: Sends HTTP Request with token to update Patient Medical History
activate BE
BE -> BE: Validates and Updates Patient Medical History
BE --> AI: Returns Updated Patient Medical History
deactivate BE
AI --> MHS: Returns Updated Patient Medical History
deactivate AI
MHS --> UMHC: Returns Updated Patient Medical History
deactivate MHS
UMHC --> V: Reurns status of the update
deactivate UMHC
V --> D: Displays the status of the update
deactivate V
deactivate D

@enduml