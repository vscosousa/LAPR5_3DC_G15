@startuml
title Doctor Operation Request Deletion Flow - Level 3

actor Doctor
participant "OperationRequest\nController" as ORC
participant "OperationRequest\nService" as ORS
participant "PlanningModule\nNotifier" as PMN
participant "LogRepository" as LR
participant "OperationRequest\nRepository" as OR
database "Database" as DB

Doctor -> ORC: DELETE /api/operationrequest/{id}\nHeaders: {\n  Authorization: Bearer JWT,\n  Content-Type: application/json\n}\nQuery: confirmed=false
activate ORC

ORC -> ORC: [Authorize(Roles = "Staff")]\nvar currentStaffId = User.FindFirst("StaffId")?.Value;\nif (string.IsNullOrEmpty(currentStaffId))\n  return Unauthorized("User is not a staff")

ORC -> ORS: GetByIdAsync(new OperationRequestId(Guid.Parse(id)))
activate ORS
ORS -> OR: GetByIdAsync(id)
OR -> DB: SELECT *\nFROM OperationRequests\nWHERE Id = @id\n  AND IsDeleted = false
DB --> OR: OperationRequest
OR --> ORS: OperationRequest
ORS --> ORC: OperationRequest

' Initial validation
ORC -> ORC: if (request == null)\n  return NotFound();\nif (request.CreatedByStaffId.Value != currentStaffId)\n  return StatusCode(403, "You can only delete your own requests");\nif (request.Status == RequestStatus.Scheduled)\n  return BadRequest("Cannot delete scheduled operations");

alt !confirmed
    ORC --> Doctor: 202 Accepted {\n  message: "Please confirm deletion of operation request",\n  requiresConfirmation: true,\n  confirmationUrl: "/api/OperationRequest/{id}?confirmed=true"\n}
    Doctor -> ORC: DELETE /api/operationrequest/{id}?confirmed=true
end

ORC -> ORS: DeleteOperationRequestAsync(id, currentStaffId)
activate ORS

' Get request and validate
ORS -> OR: GetByIdAsync(new OperationRequestId(Guid.Parse(id)))
OR -> DB: SELECT *\nFROM OperationRequests\nWHERE Id = @id\n  AND IsDeleted = false\nFOR UPDATE
DB --> OR: OperationRequest

' Mark as deleted
ORS -> ORS: operationRequest.MarkAsDeleted(currentStaffId) {\n  if (string.IsNullOrEmpty(staffId))\n    throw new ArgumentNullException();\n  if (Status == RequestStatus.Scheduled)\n    throw new BusinessRuleValidationException();\n  if (CreatedByStaffId.Value != staffId)\n    throw new UnauthorizedAccessException();\n  if (IsDeleted)\n    throw new BusinessRuleValidationException();\n\n  IsDeleted = true;\n  DeletedAt = DateTime.UtcNow;\n  DeletedBy = staffId;\n  Status = RequestStatus.Cancelled;\n}

' Create domain event
ORS -> ORS: var deletionEvent = new OperationRequestDeletedEvent(\n  operationRequest.Id,\n  currentStaffId,\n  DateTime.UtcNow\n);\noperationRequest.AddDomainEvent(deletionEvent);

' Create audit log
ORS -> LR: AddAsync(new Log(\n  TypeOfAction.Delete,\n  operationRequest.Id.ToString(),\n  $"Operation request deleted by Dr. {currentStaffId}"\n))
LR -> DB: INSERT INTO Logs (\n  Id, TypeOfAction, EntityId,\n  Message, Timestamp\n) VALUES (@values)
DB --> LR: LogId

' Notify planning module
ORS -> PMN: NotifyOperationRequestDeleted(id)
activate PMN
PMN -> PMN: try {\n  var response = await _httpClient.DeleteAsync(\n    $"{_planningModuleUrl}/api/planning/operations/{id}");\n  response.EnsureSuccessStatusCode();\n} catch (Exception ex) {\n  Console.WriteLine($"Failed to notify planning module: {ex.Message}");\n}
PMN --> ORS: void
deactivate PMN

' Save changes
ORS -> OR: RemoveAsync(operationRequest)
OR -> DB: UPDATE OperationRequests\nSET IsDeleted = true,\n    DeletedAt = @now,\n    DeletedBy = @staffId,\n    Status = 'Cancelled'\nWHERE Id = @id
DB --> OR: Success

ORS -> DB: COMMIT Transaction
DB --> ORS: Success

ORS --> ORC: true
deactivate ORS

ORC --> Doctor: 204 No Content
deactivate ORC

note right of DB #LightGreen
Database Constraints:
- PK_OperationRequests (Id)
- FK_OperationRequests_Staffs (StaffId)
- CK_OperationRequests_Status IN ('Pending','Approved',\n'Scheduled','Completed','Cancelled')
- CK_OperationRequests_IsDeleted DEFAULT false
end note

note right of ORC #LightBlue
Error Handling:
- 400: Invalid Request/Scheduled
- 401: Unauthorized
- 403: Not Original Doctor
- 404: Request Not Found
- 500: Server Error
All errors logged to AuditLogs
end note

@enduml