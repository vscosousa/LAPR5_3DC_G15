@startuml
title Doctor Operation Request Search Flow - Level 3

actor Doctor
participant "OperationRequest\nController" as ORC
participant "OperationRequest\nService" as ORS
participant "OperationRequest\nMapper" as ORM
participant "OperationRequest\nRepository" as OR
participant "Patient\nRepository" as PR
participant "OperationType\nRepository" as OTR
database "Database" as DB

Doctor -> ORC: GET /api/operationrequest/search\nHeaders: {\n  Authorization: Bearer JWT,\n  Content-Type: application/json\n}\nQuery: {\n  patientName?: string,\n  operationType?: string,\n  priorityLevel?: string,\n  status?: string,\n  startDate?: DateTime,\n  endDate?: DateTime\n}
activate ORC

ORC -> ORC: [Authorize(Roles = "Doctor")]\nvar doctorId = User.FindFirst("StaffId")?.Value;\nif (string.IsNullOrEmpty(doctorId))\n  return Unauthorized()

' Parameter conversion
ORC -> ORC: var searchCriteria = new OperationRequestSearchParams(\n  patientName: searchParams.PatientName,\n  operationType: searchParams.OperationType,\n  priority: Enum.Parse<PriorityLevel>(searchParams.PriorityLevel),\n  status: Enum.Parse<RequestStatus>(searchParams.Status),\n  startDate: searchParams.StartDate,\n  endDate: searchParams.EndDate\n);

ORC -> ORS: SearchOperationRequestsAsync(searchCriteria)
activate ORS

ORS -> OR: var query = _context.OperationRequests.AsQueryable();\n\nif (!string.IsNullOrEmpty(searchParams.PatientName))\n    query = query.Include(r => r.PatientId)\n    .Where(r => r.PatientId.ToString()\n    .Contains(searchParams.PatientName));\n\nif (!string.IsNullOrEmpty(searchParams.OperationType))\n    query = query.Where(r => r.OperationTypeId.ToString() \n    == searchParams.OperationType);\n\nif (searchParams.Priority.HasValue)\n    query = query.Where(r => r.Priority \n    == searchParams.Priority.Value);\n\nif (searchParams.Status.HasValue)\n    query = query.Where(r => r.Status \n    == searchParams.Status);\n\nreturn await query.ToListAsync();

OR -> DB: SELECT r.*, p.*, ot.*\nFROM OperationRequests r\nLEFT JOIN Patients p ON r.PatientId = p.Id\nLEFT JOIN OperationTypes ot ON r.OperationTypeId = ot.Id\nWHERE\n  (@PatientName IS NULL OR p.FullName LIKE @PatientName)\n  AND (@OperationType IS NULL OR ot.Name = @OperationType)\n  AND (@Priority IS NULL OR r.Priority = @Priority)\n  AND (@Status IS NULL OR r.Status = @Status)\n  AND (@StartDate IS NULL OR r.CreatedAt >= @StartDate)\n  AND (@EndDate IS NULL OR r.CreatedAt <= @EndDate)\n  AND r.IsDeleted = 0
DB --> OR: Results

' Enrich with details
loop For each request
    ORS -> PR: GetByIdAsync(new PatientId(request.PatientId))
    PR -> DB: SELECT * FROM Patients WHERE Id = @Id
    DB --> PR: PatientData
    
    ORS -> OTR: GetByIdAsync(new OperationTypeId(request.OperationTypeId))
    OTR -> DB: SELECT * FROM OperationTypes WHERE Id = @Id
    DB --> OTR: OperationTypeData
end

OR --> ORS: EnrichedRequests

' Map to DTOs
ORS -> ORM: return results.Select(r => new OperationRequestDTO(\n  Guid.Parse(r.Id.ToString()),\n  r.PatientId.ToString(),\n  r.CreatedByStaffId.Value,\n  r.OperationTypeId.ToString(),\n  r.Deadline,\n  r.Priority,\n  r.CreatedAt,\n  r.Status,\n  r.Patient\n));
ORM --> ORS: MappedDTOs

ORS --> ORC: List<OperationRequestDTO>
deactivate ORS

ORC --> Doctor: 200 OK {\n  results: OperationRequestDTO[],\n  total: number,\n  page: number,\n  pageSize: number\n}
deactivate ORC

note right of DB #LightGreen
Database Constraints:
- PK_OperationRequests (Id)
- FK_OperationRequests_Patients (PatientId)
- FK_OperationRequests_OperationTypes (OperationTypeId)
- FK_OperationRequests_Staffs (StaffId)
end note

note right of ORC #LightBlue
Error Handling:
- 400: Invalid Parameters
- 401: Unauthorized
- 403: Not Doctor Role
- 500: Server Error
All errors logged to AuditLogs
end note

@enduml